# prob: a vector (of length 2) that gives probability of death and life respectively for initial config
# returns a list of grids (matrices)
game_of_life <- function(size = 10, num_reps = 50, prob = c(0.5, 0.5)) {
grid <- list()
grid[[1]] <- replicate(size, sample(c(0,1), size, replace = TRUE, prob = prob))
dev_null <- foreach(i = seq_len(num_reps) + 1) %do% {
grid[[i]] <- grid[[i-1]]
foreach(j = seq_len(size)) %:%
foreach(k = seq_len(size)) %do% {
# Apply game rules.
num_neighbors <- how_many_neighbors(grid[[i]], j, k)
alive <- grid[[i]][j,k] == 1
if(alive && num_neighbors <= 1) grid[[i]][j,k] <- 0
if(alive && num_neighbors >= 4) grid[[i]][j,k] <- 0
if(!alive && num_neighbors == 3) grid[[i]][j,k] <- 1
}
}
grid
}
# Converts the current grid (matrix) to a ggplot2 image
grid_to_ggplot <- function(grid) {
# Permutes the matrix so that melt labels this correctly.
grid <- grid[seq.int(nrow(grid), 1), ]
grid <- melt(grid)
grid$value <- factor(ifelse(grid$value, "Alive", "Dead"))
p <- ggplot(grid, aes(x=X1, y=X2, z = value, color = value))
p <- p + geom_tile(aes(fill = value))
p  + scale_fill_manual(values = c("Dead" = "white", "Alive" = "black"))
}
game_grids <- game_of_life(size = 20, num_reps = 250, prob = c(0.1, 0.9))
grid_ggplot <- lapply(game_grids, grid_to_ggplot)
saveGIF(lapply(grid_ggplot, print), clean = TRUE)
game.of.life <- function(side, steps, filename){
# the sideXside matrix, filled up with binomially
# distributed individuals
X <- matrix(nrow=side, ncol=side)
X[] <- rbinom(side^2,1,0.4)
# array that stores all of the simulation steps
# (so that it can be exported as a gif)
storage <- array(0, c(side, side, steps))
# the simulation
for (i in 1:steps)
{
# make the shifted copies of the original array
allW = cbind( rep(0,side) , X[,-side] )
allNW = rbind(rep(0,side),cbind(rep(0,side-1),X[-side,-side]))
allN = rbind(rep(0,side),X[-side,])
allNE = rbind(rep(0,side),cbind(X[-side,-1],rep(0,side-1)))
allE = cbind(X[,-1],rep(0,side))
allSE = rbind(cbind(X[-1,-1],rep(0,side-1)),rep(0,side))
allS = rbind(X[-1,],rep(0,side))
allSW = rbind(cbind(rep(0,side-1),X[-1,-side]),rep(0,side))
# summation of the matrices
X2 <- allW + allNW + allN + allNE + allE + allSE + allS + allSW
# the rules of GoL are applied using logical subscripting
X3 <- X
X3[X==0 & X2==3] <- 1
X3[X==1 & X2<2] <- 0
X3[X==1 & X2>3] <- 0
X <- X3
# each simulation step is stored
storage[,,i] <- X2
# note that I am storing the array of Ni values -
# - this is in order to make the animation prettier
}
storage <- storage/max(storage) # scaling the results
# to a 0-1 scale
# writing the results into an animated gif
write.gif(storage, filename, col="jet", delay=5)
}
View(game.of.life)
?rbinom
# array that stores all of the simulation steps
# (so that it can be exported as a gif)
storage <- array(0, c(side, side, steps))
?array
game.of.life <- function(side, steps, filename){
# the sideXside matrix, filled up with binomially
# distributed individuals
X <- matrix(nrow=side, ncol=side)
X[] <- rbinom(side^2,1,0.4)
?rbinom ## génère une distribution binomiale
# array that stores all of the simulation steps
# (so that it can be exported as a gif)
storage <- array(0, c(side, side, steps))
?array
# the simulation
for (i in 1:steps)
{
# make the shifted copies of the original array
allW = cbind( rep(0,side) , X[,-side] )
allNW = rbind(rep(0,side),cbind(rep(0,side-1),X[-side,-side]))
allN = rbind(rep(0,side),X[-side,])
allNE = rbind(rep(0,side),cbind(X[-side,-1],rep(0,side-1)))
allE = cbind(X[,-1],rep(0,side))
allSE = rbind(cbind(X[-1,-1],rep(0,side-1)),rep(0,side))
allS = rbind(X[-1,],rep(0,side))
allSW = rbind(cbind(rep(0,side-1),X[-1,-side]),rep(0,side))
# summation of the matrices
X2 <- allW + allNW + allN + allNE + allE + allSE + allS + allSW
# the rules of GoL are applied using logical subscripting
X3 <- X
X3[X==0 & X2==3] <- 1
X3[X==1 & X2<2] <- 0
X3[X==1 & X2>3] <- 0
X <- X3
# each simulation step is stored
storage[,,i] <- X2
# note that I am storing the array of Ni values -
# - this is in order to make the animation prettier
}
storage <- storage/max(storage) # scaling the results
# to a 0-1 scale
# writing the results into an animated gif
write.gif(storage, filename, col="jet", delay=5)
}
setwd("E:/Bureau/Becasse stats")
getwd()
mille_carnet <-read.csv("1000.csv",
dec=",",
sep=";",
head=T)
setwd("E:/Bureau/Becasse stats")
mille_carnet <-read.csv("1000.csv",
dec=",",
sep=";",
head=T)
generale_carnet <-read.csv("generale.csv",
dec=",",
sep=";",
head=T)
mille_tel <-read.csv("mille_tel.csv",
dec=",",
sep=";",
head=T)
setwd("E:/Dropbox/Dropbox/##Soil Microbes Internship/Data/R_data") ## From home
library(devtools)
library(plyr)
library(tidyverse)
library(vegan)
library(labdsv)
library(gridExtra)
library(ggpubr)
library(extrafont)
library(ggrepel)
library(dada2); packageVersion("dada2")
`%!in%` <- function(a,b) ! a %in% b
library(grid)
library(phyloseq)
library(esquisse)
library(dendextend)
library(reshape2)
library(viridis)
library(hrbrthemes)
hrbrthemes::import_roboto_condensed()
library(wesanderson)
library(RColorBrewer)
library(rmarkdown)
library(gllvm)
library(broom)
library(GGally)
library(corrplot); library(gclus)
library(colortools)
library(tidygraph)
library(ggraph)
library(igraph)
library(Hmisc)
library(Matrix)
library(qgraph)
library(bbplot)
soil_properties <- read.csv("soil_properties.csv",
dec = ".",
sep = ";",
fileEncoding="UTF-8-BOM",
row.names = 1,
check.names = FALSE)
soil_properties_bis <- read.csv("soil_properties_bis.csv",
dec = ".",
sep = ";",
fileEncoding="UTF-8-BOM",
check.names = FALSE)
sp_bis_dark <- soil_properties_bis %>% filter(light_treatment == "Dark")
sp_bis_light <- soil_properties_bis %>% filter(light_treatment == "Light")
#algae
a_class <- read.csv("algae/algae_class.csv",
dec = ",",
sep = ";",
fileEncoding="UTF-8-BOM",
row.names = 1)
#bacteria
b_class <- read.csv("bacteria/bacteria_class.csv",
dec = ",",
sep = ";",
fileEncoding="UTF-8-BOM",
row.names = 1)
#fungi
f_class <- read.csv("fungi/fungi_class.csv",
dec = ",",
sep = "\t",
fileEncoding="UTF-8-BOM",
row.names = 1)
b_class <- read.csv("bacteria/bacteria_class.csv",
dec = ",",
sep = ";",
fileEncoding="UTF-8-BOM",
row.names = 1)
y <- b_class[,-(which(colSums(b_class) < 100))] %>% as.matrix()
Xd <- sp_bis_dark %>% select(ocs_flux, co2_flux) %>% scale() %>% as.matrix()
Xl <- sp_bis_light %>% select(ocs_flux, co2_flux) %>% scale() %>% as.matrix()
criterias <- NULL
fitl <- gllvm(y, Xl, family = "negative.binomial", num.lv = 5,
formula = ~ ocs_flux + co2_flux, seed = 1234)
coefplot(fitl, cex.ylab = 0.7, mar = c(4, 9, 2, 1),
xlim.list = list(NULL, NULL, c(-4, 4)), mfrow=c(1,2),
main = "Bacteria light")
x11();coefplot(fitl, cex.ylab = 0.7, mar = c(4, 9, 2, 1),
xlim.list = list(NULL, NULL, c(-4, 4)), mfrow=c(1,2),
main = "Bacteria light")
fitd <- gllvm(y, Xd, family = "negative.binomial", num.lv = 5,
formula = ~ ocs_flux + co2_flux, seed = 1234)
coefplot(fitd, cex.ylab = 0.7, mar = c(4, 9, 2, 1),
xlim.list = list(NULL, NULL, c(-4, 4)), mfrow=c(1,2),
main = "Bacteria dark")
fitl <- gllvm(y, Xl, family = "negative.binomial", num.lv = 5,
formula = ~ ocs_flux, seed = 1234)
x11();coefplot(fitl, cex.ylab = 0.7, mar = c(4, 9, 2, 1),
xlim.list = list(NULL, NULL, c(-4, 4)), mfrow=c(1,2),
main = "Bacteria light")
fitd <- gllvm(y, Xd, family = "negative.binomial", num.lv = 5,
formula = ~ ocs_flux + co2_flux, seed = 1234)
coefplot(fitd, cex.ylab = 0.7, mar = c(4, 9, 2, 1),
xlim.list = list(NULL, NULL, c(-4, 4)), mfrow=c(1,2),
main = "Bacteria dark")
fitd <- gllvm(y, Xd, family = "negative.binomial", num.lv = 5,
formula = ~ ocs_flux, seed = 1234)
coefplot(fitd, cex.ylab = 0.7, mar = c(4, 9, 2, 1),
xlim.list = list(NULL, NULL, c(-4, 4)), mfrow=c(1,2),
main = "Bacteria dark")
f_class <- read.csv("fungi/fungi_class.csv",
dec = ",",
sep = "\t",
fileEncoding="UTF-8-BOM",
row.names = 1)
y <- f_class[,-(which(colSums(f_class) < 100))] %>% as.matrix()
Xd <- sp_bis_dark %>% select(ocs_flux, co2_flux) %>% scale() %>% as.matrix()
Xl <- sp_bis_light %>% select(ocs_flux, co2_flux) %>% scale() %>% as.matrix()
fitl <- gllvm(y, Xl, family = "negative.binomial", num.lv = 5,
formula = ~ ocs_flux, seed = 1234)
coefplot(fitl, cex.ylab = 0.7, mar = c(4, 9, 2, 1),
xlim.list = list(NULL, NULL, c(-4, 4)), mfrow=c(1,2),
main = "Fungi light")
fitd <- gllvm(y, Xd, family = "negative.binomial", num.lv = 3,
formula = ~ ocs_flux, seed = 1234)
coefplot(fitd, cex.ylab = 0.7, mar = c(4, 9, 2, 1),
xlim.list = list(NULL, NULL, c(-4, 4)), mfrow=c(1,2),
main = "Fungi dark")
ac <- a_class %>% mutate(light = soil_properties$light_treatment)
bc <- b_class
fc <- f_class
ac <- ac %>% select(-Unknown, -Unclassified, -Environmental)
bc <- bc %>% select(-Unknown, -Unclassified, -Environmental)
fc <- fc %>% select(-Unknown, -Unclassified, -Environmental)
otu.table <- cbind(ac, bc, fc)
otu.table <- otu.table %>% filter(light == "dark") %>% select(-light)
otu.table.filter <- otu.table[ ,colSums(otu.table) >= 10]
otu.table.filter <- otu.table.filter %>% select(Pedinophyceae,
Mediophyceae,
Dinophyceae,
Bacillariophyceae,
Phaeophyceae,
Xanthophyceae,
Klebsormidiophyceae,
Coscinodiscophyceae,
Ulvophyceae,
Trebouxiophyceae,
Takakiopsida,
Thermomicrobia,
Anaerolineae,
Caldilineae,
Flavobacteriia,
Gemmatimonadetes,
Chthonomonadetes,
Acidimicrobiia,
Nitrospira,
Alphaproteobacteria,
Planctomycetacia,
Opitutae,
Phycisphaerae,
Solibacteres,
Chloroflexi,
Flavobacteria,
Sphingobacteriia,
Betaproteobacteria,
Holophagae,
Cytophagia,
Planctomycetia,
Actinobacteria,
Blastocladiomycetes,
Chytridiomycetes,
Sordariomycetes,
Leotiomycetes,
Neocallimastigomycetes,
Archaeosporomycetes,
Exobasidiomycetes,
Agaricomycetes)
otu.cor <- rcorr(as.matrix(otu.table.filter), type="spearman")
otu.pval <- forceSymmetric(otu.cor$P)
p.yes <- otu.pval<0.05
r.val = otu.cor$r # select all the correlation values
p.yes.r <- r.val*p.yes # only select correlation values based on p-value criterion
p.yes.r <- abs(p.yes.r)>0.75 # output is logical vector
p.yes.rr <- p.yes.r*r.val # use logical vector for subscripting.
adjm <- as.matrix(p.yes.rr)
net.grph=graph.adjacency(adjm,mode="undirected",weighted=TRUE,diag=FALSE)
edgew<-E(net.grph)$weight
bad.vs<-V(net.grph)[degree(net.grph) == 0]
net.grph <-delete.vertices(net.grph, bad.vs)
class1 <- colnames(a_class)
class2 <- colnames(b_class)
class3 <- colnames(f_class)
indclass <- stack(mget(ls(pattern = "class*")))
cols <- c(class1="darkolivegreen2",
class2="dodgerblue",
class3="goldenrod4")
V(net.grph)$color <- cols[ indclass$ind[match( V(net.grph)$name, indclass$values ) ] ]
V(net.grph)$name <- abbreviate(V(net.grph)$name, minlength = 3, use.classes = TRUE,
dot = FALSE, strict = FALSE,
method = c("left.kept", "both.sides"), named = TRUE)
x11(); plot(net.grph,
vertex.size=8,
vertex.frame.color="black",
edge.curved=F,
edge.width=1.5,
layout=layout.fruchterman.reingold,
edge.color=ifelse(edgew < 0,"red3","springgreen4"),
vertex.label.color="black",
vertex.label.family="Times New Roman",
vertex.label.font=2,
vertex.label.dist = 0.5)
x11(); plot(net.grph,
vertex.size=8,
vertex.frame.color="black",
edge.curved=F,
edge.width=1.5,
layout=layout.fruchterman.reingold,
edge.color=ifelse(edgew < 0,"gray32","springgreen4"),
vertex.label.color="black",
vertex.label.family="Times New Roman",
vertex.label.font=2,
vertex.label.dist = 0.5)
x11(); plot(net.grph,
vertex.size=8,
vertex.frame.color="black",
edge.curved=F,
edge.width=1.5,
layout=layout.fruchterman.reingold,
edge.color=ifelse(edgew < 0,"gray32","springgreen4"),
vertex.label.color="black",
vertex.label.family="Times New Roman",
vertex.label.font=2,
vertex.label.dist = 0.5)
ac <- a_class %>% mutate(light = soil_properties$light_treatment)
bc <- b_class
fc <- f_class
ac <- ac %>% select(-Unknown, -Unclassified, -Environmental)
bc <- bc %>% select(-Unknown, -Unclassified, -Environmental)
fc <- fc %>% select(-Unknown, -Unclassified, -Environmental)
otu.table <- cbind(ac, bc, fc)
otu.table <- otu.table %>% filter(light == "dark") %>% select(-light)
otu.table.filter <- otu.table[ ,colSums(otu.table) >= 10]
otu.table.filter <- otu.table.filter %>% select(Pedinophyceae,
Mediophyceae,
Dinophyceae,
Bacillariophyceae,
Phaeophyceae,
Xanthophyceae,
Klebsormidiophyceae,
Coscinodiscophyceae,
Ulvophyceae,
Trebouxiophyceae,
Takakiopsida,
Thermomicrobia,
Anaerolineae,
Caldilineae,
Flavobacteriia,
Gemmatimonadetes,
Chthonomonadetes,
Acidimicrobiia,
Nitrospira,
Alphaproteobacteria,
Planctomycetacia,
Opitutae,
Phycisphaerae,
Solibacteres,
Chloroflexi,
Flavobacteria,
Sphingobacteriia,
Betaproteobacteria,
Holophagae,
Cytophagia,
Planctomycetia,
Actinobacteria,
Blastocladiomycetes,
Chytridiomycetes,
Sordariomycetes,
Leotiomycetes,
Neocallimastigomycetes,
Archaeosporomycetes,
Exobasidiomycetes,
Agaricomycetes)
otu.cor <- rcorr(as.matrix(otu.table.filter), type="spearman")
otu.pval <- forceSymmetric(otu.cor$P)
p.yes <- otu.pval<0.05
r.val = otu.cor$r # select all the correlation values
p.yes.r <- r.val*p.yes # only select correlation values based on p-value criterion
p.yes.r <- abs(p.yes.r)>0.75 # output is logical vector
p.yes.rr <- p.yes.r*r.val # use logical vector for subscripting.
adjm <- as.matrix(p.yes.rr)
net.grph=graph.adjacency(adjm,mode="undirected",weighted=TRUE,diag=FALSE)
edgew<-E(net.grph)$weight
bad.vs<-V(net.grph)[degree(net.grph) == 0]
net.grph <-delete.vertices(net.grph, bad.vs)
class1 <- colnames(a_class)
class2 <- colnames(b_class)
class3 <- colnames(f_class)
indclass <- stack(mget(ls(pattern = "class*")))
cols <- c(class1="darkolivegreen2",
class2="dodgerblue",
class3="goldenrod4")
V(net.grph)$color <- cols[ indclass$ind[match( V(net.grph)$name, indclass$values ) ] ]
V(net.grph)$name <- abbreviate(V(net.grph)$name, minlength = 3, use.classes = TRUE,
dot = FALSE, strict = FALSE,
method = c("left.kept", "both.sides"), named = TRUE)
transitivity(net.graph, type = c("global"), vids = NULL,
weights = NULL, isolates = c("zero"))
transitivity(net.grph, type = c("global"), vids = NULL,
weights = NULL, isolates = c("zero"))
ac <- a_class %>% mutate(light = soil_properties$light_treatment)
bc <- b_class
fc <- f_class
ac <- ac %>% select(-Unknown, -Unclassified, -Environmental)
bc <- bc %>% select(-Unknown, -Unclassified, -Environmental)
fc <- fc %>% select(-Unknown, -Unclassified, -Environmental)
otu.table <- cbind(ac, bc, fc)
otu.table <- otu.table %>% filter(light == "light") %>% select(-light)
otu.table.filter <- otu.table[ ,colSums(otu.table) >= 10]
otu.table.filter <- otu.table.filter %>% select(Pedinophyceae,
Mediophyceae,
Dinophyceae,
Bacillariophyceae,
Phaeophyceae,
Xanthophyceae,
Klebsormidiophyceae,
Chrysophyceae,
Coscinodiscophyceae,
Ulvophyceae,
Trebouxiophyceae,
Takakiopsida,
Thermomicrobia,
Anaerolineae,
Caldilineae,
Flavobacteriia,
Gemmatimonadetes,
Chthonomonadetes,
Acidimicrobiia,
Nitrospira,
Alphaproteobacteria,
Planctomycetacia,
Opitutae,
Phycisphaerae,
Solibacteres,
Chloroflexi,
Flavobacteria,
Sphingobacteriia,
Betaproteobacteria,
Holophagae,
Cytophagia,
Planctomycetia,
Actinobacteria,
Blastocladiomycetes,
Chytridiomycetes,
Sordariomycetes,
Leotiomycetes,
Neocallimastigomycetes,
Archaeosporomycetes,
Exobasidiomycetes,
Agaricomycetes)
otu.cor <- rcorr(as.matrix(otu.table.filter), type="spearman")
otu.pval <- forceSymmetric(otu.cor$P)
p.yes <- otu.pval<0.05
r.val = otu.cor$r # select all the correlation values
p.yes.r <- r.val*p.yes # only select correlation values based on p-value criterion
p.yes.r <- abs(p.yes.r)>0.75 # output is logical vector
p.yes.rr <- p.yes.r*r.val # use logical vector for subscripting.
adjm <- as.matrix(p.yes.rr)
net.grph=graph.adjacency(adjm,mode="undirected",weighted=TRUE,diag=FALSE)
edgew<-E(net.grph)$weight
bad.vs<-V(net.grph)[degree(net.grph) == 0]
net.grph <-delete.vertices(net.grph, bad.vs)
class1 <- colnames(a_class)
class2 <- colnames(b_class)
class3 <- colnames(f_class)
indclass <- stack(mget(ls(pattern = "class*")))
cols <- c(class1="darkolivegreen2",
class2="dodgerblue",
class3="goldenrod4")
V(net.grph)$color <- cols[ indclass$ind[match( V(net.grph)$name, indclass$values ) ] ]
V(net.grph)$name <- abbreviate(V(net.grph)$name, minlength = 3, use.classes = TRUE,
dot = FALSE, strict = FALSE,
method = c("left.kept", "both.sides"), named = TRUE)
transitivity(net.grph, type = c("global"), vids = NULL,    ## 0.45
weights = NULL, isolates = c("zero"))
